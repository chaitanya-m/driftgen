From 423ab8c0309384d53b07f1890e99e2aadcc841d4 Mon Sep 17 00:00:00 2001
From: Chaitanya Manapragada <cman39@student.monash.edu.au>
Date: Sat, 22 Jul 2017 19:58:18 +1000
Subject: [PATCH 1/2] Adding output for debugging. Removing node deactivation.

EvaluatePrequential -l trees.VFDT -s (generators.monash.AbruptDriftGenerator -o 0.800001 -c -z 2 -r 55 -i 0.800001 -b 200000) -i 400000 -f 1000

VFDT original has same buggy performance.

Note how after the consecutive split {147,433|366} is replaced by {0|200}


burnIn=200000
exact magnitude for p(y|x)=0.75	asked=0.800001
===== 200511 =======
        if [att 2:x2] = {val 1:v1}:
          if [att 1:x1] = {val 1:v1}:
            if [att 2:x2] = {val 1:v1}:
              Leaf [class:class] = <class 1:class1> weights: {147,433|366}
          if [att 1:x1] = {val 2:v2}:
            Leaf [class:class] = <class 2:class2> weights: {0|20,679}
        if [att 2:x2] = {val 2:v2}:
          if [att 1:x1] = {val 1:v1}:
            if [att 2:x2] = {val 1:v1}:
              Leaf [class:class] = <class 1:class1> weights: {0|0}
            if [att 2:x2] = {val 2:v2}:
              Leaf [class:class] = <class 2:class2> weights: {81|27,521}
          if [att 1:x1] = {val 2:v2}:
            Leaf [class:class] = <class 1:class1> weights: {3,858|11}
===== 200512 =======
        if [att 2:x2] = {val 1:v1}:
          if [att 1:x1] = {val 1:v1}:
            if [att 2:x2] = {val 1:v1}:
              if [att 2:x2] = {val 1:v1}:
                Leaf [class:class] = <class 2:class2> weights: {0|200}
          if [att 1:x1] = {val 2:v2}:
            Leaf [class:class] = <class 2:class2> weights: {0|20,679}
        if [att 2:x2] = {val 2:v2}:
          if [att 1:x1] = {val 1:v1}:
            if [att 2:x2] = {val 1:v1}:
              Leaf [class:class] = <class 1:class1> weights: {0|0}
            if [att 2:x2] = {val 2:v2}:
              Leaf [class:class] = <class 2:class2> weights: {81|27,521}
          if [att 1:x1] = {val 2:v2}:
            Leaf [class:class] = <class 1:class1> weights: {3,858|11}
---
 src/moa/classifiers/trees/VFDT.java | 65 +++++++++++++++++++++++++++++++------
 1 file changed, 55 insertions(+), 10 deletions(-)

diff --git a/src/moa/classifiers/trees/VFDT.java b/src/moa/classifiers/trees/VFDT.java
index 77ca2f6..9362b5c 100644
--- a/src/moa/classifiers/trees/VFDT.java
+++ b/src/moa/classifiers/trees/VFDT.java
@@ -19,6 +19,10 @@
  */
 package moa.classifiers.trees;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.PrintWriter;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashSet;
@@ -96,6 +100,12 @@ public class VFDT extends AbstractClassifier {
 
     private static final long serialVersionUID = 1L;
 
+    private int i = 0;
+
+    private int numInstances = 0;
+
+	private PrintWriter writer = null;
+
     @Override
     public String getPurposeString() {
         return "Hoeffding Tree or VFDT.";
@@ -441,8 +451,7 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
                 // add null split as an option
                 bestSuggestions.add(new AttributeSplitSuggestion(null,
                         new double[0][], criterion.getMeritOfSplit(
-                        preSplitDist,
-                        new double[][]{preSplitDist})));
+                        preSplitDist, new double[][]{preSplitDist})));
             }
             for (int i = 0; i < this.attributeObservers.size(); i++) {
                 AttributeClassObserver obs = this.attributeObservers.get(i);
@@ -505,10 +514,21 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
         if (this.leafpredictionOption.getChosenIndex()>0) {
             this.removePoorAttsOption = null;
         }
+
+    	if (numInstances == 0){
+    		try {
+				writer = new PrintWriter(new FileOutputStream(new File("moa_output.txt"),false));
+				writer = new PrintWriter(new FileOutputStream(new File("moa_output.txt"),true));
+			} catch (FileNotFoundException e) {
+				e.printStackTrace();
+			}
+    	}
+
     }
 
     @Override
     public void trainOnInstanceImpl(Instance inst) {
+    	//System.err.println(i++);
         if (this.treeRoot == null) {
             this.treeRoot = newLearningNode();
             this.activeLeafNodeCount = 1;
@@ -539,6 +559,29 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
                 % this.memoryEstimatePeriodOption.getValue() == 0) {
             estimateModelByteSizes();
         }
+
+    	//System.out.println(this.measureTreeDepth());
+
+        numInstances++;
+
+		//System.out.println(numInstances);
+
+
+    	if(numInstances > 200510 && numInstances < 200513 && numInstances % 1 == 0){
+    		StringBuilder out = new StringBuilder();
+    		this.treeRoot.describeSubtree(this, out, 8);
+    		System.out.println("===== " + numInstances + " =======");
+    		System.out.print(out);
+    		writer.println(numInstances);
+    		writer.print(out);
+    	}
+    	if(numInstances > 300000){
+    		writer.close();
+    	}
+
+
+
+
     }
 
     @Override
@@ -672,10 +715,12 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
                 }
             }
             if (shouldSplit) {
+            	//System.err.println("SPLITTING - VVVVVVVV");
+
                 AttributeSplitSuggestion splitDecision = bestSplitSuggestions[bestSplitSuggestions.length - 1];
                 if (splitDecision.splitTest == null) {
                     // preprune - null wins
-                    deactivateLearningNode(node, parent, parentIndex);
+                    //deactivateLearningNode(node, parent, parentIndex);
                 } else {
                     SplitNode newSplit = newSplitNode(splitDecision.splitTest,
                             node.getObservedClassDistribution(),splitDecision.numSplits() );
@@ -728,10 +773,10 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
             int cutoff = learningNodes.length - maxActive;
             for (int i = 0; i < cutoff; i++) {
                 if (learningNodes[i].node instanceof ActiveLearningNode) {
-                    deactivateLearningNode(
-                            (ActiveLearningNode) learningNodes[i].node,
-                            learningNodes[i].parent,
-                            learningNodes[i].parentBranch);
+//                    deactivateLearningNode(
+//                            (ActiveLearningNode) learningNodes[i].node,
+//                            learningNodes[i].parent,
+//                            learningNodes[i].parentBranch);
                 }
             }
             for (int i = cutoff; i < learningNodes.length; i++) {
@@ -779,9 +824,9 @@ public FlagOption binarySplitsOption = new FlagOption("binarySplits", 'b',
         FoundNode[] learningNodes = findLearningNodes();
         for (int i = 0; i < learningNodes.length; i++) {
             if (learningNodes[i].node instanceof ActiveLearningNode) {
-                deactivateLearningNode(
-                        (ActiveLearningNode) learningNodes[i].node,
-                        learningNodes[i].parent, learningNodes[i].parentBranch);
+//                deactivateLearningNode(
+//                        (ActiveLearningNode) learningNodes[i].node,
+//                        learningNodes[i].parent, learningNodes[i].parentBranch);
             }
         }
     }
-- 
2.7.4

