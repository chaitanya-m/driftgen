From 5e0a3db77cfecce0c4d708944e15854e2404fe05 Mon Sep 17 00:00:00 2001
From: Chaitanya Manapragada <cman39@student.monash.edu.au>
Date: Fri, 2 Jun 2017 21:55:51 +1000
Subject: [PATCH 04/27] Set isAlternate status of a new alternate learning node
 to true

---
 src/moa/classifiers/trees/HATADWIN.java | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/moa/classifiers/trees/HATADWIN.java b/src/moa/classifiers/trees/HATADWIN.java
index 59c8876..d91577a 100644
--- a/src/moa/classifiers/trees/HATADWIN.java
+++ b/src/moa/classifiers/trees/HATADWIN.java
@@ -25,6 +25,7 @@ import java.util.Random;
 import moa.classifiers.bayes.NaiveBayes;
 import moa.classifiers.core.conditionaltests.InstanceConditionalTest;
 import moa.classifiers.core.driftdetection.ADWIN;
+import moa.classifiers.trees.HoeffdingTree.LearningNode;
 import moa.core.DoubleVector;
 import moa.core.MiscUtils;
 import moa.core.Utils;
@@ -216,10 +217,10 @@ public class HATADWIN extends HoeffdingTree {
             //if (this.isAlternateTree == false) {
             if (this.ErrorChange == true) {//&& this.alternateTree == null) {
                 //Start a new alternative tree : learning node
-                this.alternateTree = ht.newLearningNode();
-                //this.alternateTree.isAlternateTree = true;
+                this.alternateTree = ht.newLearningNode(true); // isAlternate is set to true
                 ht.alternateTrees++;
             } // Check condition to replace tree
+
             else if (this.alternateTree != null && ((NewNode) this.alternateTree).isNullError() == false) {
                 if (this.getErrorWidth() > 300 && ((NewNode) this.alternateTree).getErrorWidth() > 300) {
                     double oldErrorRate = this.getErrorEstimation();
@@ -482,6 +483,14 @@ public class HATADWIN extends HoeffdingTree {
 
     protected int switchedAlternateTrees;
 
+
+    protected LearningNode newLearningNode(boolean isAlternate) {
+        AdaLearningNode aln = new AdaLearningNode(new double[0]);
+        aln.setAlternate(false);
+        return aln;
+    }
+
+
     @Override
     protected LearningNode newLearningNode(double[] initialClassObservations) {
         // IDEA: to choose different learning nodes depending on predictionOption
-- 
2.7.4

