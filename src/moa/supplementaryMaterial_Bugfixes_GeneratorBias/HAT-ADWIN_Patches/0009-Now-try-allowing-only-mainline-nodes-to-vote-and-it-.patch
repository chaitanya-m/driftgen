From d1b0ecfec622f6a68d2aa5f35fa5e65a6f5f7ccd Mon Sep 17 00:00:00 2001
From: Chaitanya Manapragada <cman39@student.monash.edu.au>
Date: Fri, 2 Jun 2017 23:33:51 +1000
Subject: [PATCH 09/27] Now try allowing only mainline nodes to vote, and it
 breaks.

What is happening is that without alternate votes and without subtree substititution, VFDT is not approximated at all. If only mainline nodes are allowed to vote, error remains low until drift occurs and learning stops. If only alternates are allowed to vote, there is no learning until drift occurs and then it takes off.

The scenario of interest is the first one. There must be a recovery that approximates VFDT but there isn't.

Following drift, even though there is no subtree substitution, and alternates are not allowed to vote, the accuracy must recover. But it doesn't. Mainline nodes stop learning after a drift. But they shouldn't. Whether there is an alternate tree or not, they must keep learning and must recover at least as VFDT does.

EvaluatePrequential -l trees.HATADWIN -s (generators.monash.AbruptDriftGenerator -o 0.800001 -c -z 5 -n 5 -v 5 -r 1 -b 200000) -i 400000 -f 1000
---
 src/moa/classifiers/trees/HATADWIN.java | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/src/moa/classifiers/trees/HATADWIN.java b/src/moa/classifiers/trees/HATADWIN.java
index ac9f026..a3a0631 100644
--- a/src/moa/classifiers/trees/HATADWIN.java
+++ b/src/moa/classifiers/trees/HATADWIN.java
@@ -654,7 +654,9 @@ public class HATADWIN extends HoeffdingTree {
             DoubleVector result = new DoubleVector();
             int predictionPaths = 0;
             for (FoundNode foundNode : foundNodes) {
-                if (foundNode.parentBranch != -999) {
+            	if (foundNode.node != null){
+            	if(!((NewNode)foundNode.node).isAlternate()){
+//                if (foundNode.parentBranch != -999) {
                 	// this only works one level down
                 	// Otherwise it doesn't - the node will just have a split index as parent branch
                 	// So the filter will still add any nodes found deeper down to foundNodes
@@ -681,11 +683,11 @@ public class HATADWIN extends HoeffdingTree {
                     predictionPaths++;
                 }
             }
-
-            if(predictionPaths != 1) {
-            	System.err.println("predictionPaths != 1");
-            	System.exit(1);
             }
+//            if(predictionPaths < 1) {
+//            	System.err.println("predictionPaths = 0");
+//            	System.exit(1);
+//            }
 
             //if (predictionPaths > this.maxPredictionPaths) {
             //	this.maxPredictionPaths++;
-- 
2.7.4

